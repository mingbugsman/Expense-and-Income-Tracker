

@model Expense_Tracker_App.Models.AccountViewModels.RegisterViewModel
@{
    ViewData["Title"] = "Register";
}
<div class="row">
    <div class="col-md-7">
        <div class="p-5" style="background-color:#212b36">
            <form asp-route-returnurl="@ViewData["ReturnUrl"]" method="post">
                <h4>Register an account</h4>


                <div class="mb-3">
                    @*syncfunction*@
                    <label>Email</label>
                    <ejs-textbox id="email" ejs-for="Email"
                                 placeholder="Email..." ></ejs-textbox>
                    <span asp-validation-for="Email" class="text-danger fs-6"></span>

                </div>
                <div class="mb-3">
                    @*Password*@
                    @*Syncfunction*@
                    <label>Password</label>
                    <ejs-textbox type="password" ejs-for="Password" id="password"
                                 placeholder="Password..."></ejs-textbox>
                 
                    <ul class="mt-2" id="password-requirements">
                        <li id="length" class="invalid">Độ dài tối thiểu 6 kí tự.</li>
                        <li id="uppercase" class="invalid">Có ít nhất một chữ cái viết hoa.</li>
                        <li id="lowercase" class="invalid">Có ít nhất một chữ cái viết thường.</li>
                        <li id="number" class="invalid">Có ít nhất một chữ số.</li>
                        <li id="special" class="invalid">Có ít nhất một ký tự đặc biệt.</li>
                    </ul>
                </div>
                <div class="mb-3">
                    @*Password*@
                    @*Syncfunction*@
                    <label>Confirmed password</label>
                    <ejs-textbox type="password" ejs-for="ConfirmPassword" id="ConfirmPassword"
                                 placeholder="Confirm Password..."></ejs-textbox>
                    <span asp-validation-for="ConfirmPassword" style="color:red;font-size:14px"></span>
                </div>
                <div class="mb-3">
                    <a href="/Account/Login">Already have an account?</a>
                </div>

               
                <div class="mb-3">
                    <ejs-button id="submit" content="Submit" type="Submit" cssClass="e-success"></ejs-button>
                </div>
            </form>
        </div>
    </div>
</div>


<script>
    document.addEventListener('DOMContentLoaded', function () {
        const passwordInput = document.getElementById('password');
        const confirmPasswordInput = document.getElementById('ConfirmPassword'); // Sửa đúng ID
        const matchMessage = document.getElementById('password-match');
        const submitButton = document.getElementById('submit');

        const requirements = {
            length: document.getElementById('length'),
            uppercase: document.getElementById('uppercase'),
            lowercase: document.getElementById('lowercase'),
            number: document.getElementById('number'),
            special: document.getElementById('special'),
        };

        function checkRequirement(element, isValid) {
            if (isValid) {
                element.classList.remove('invalid');
                element.classList.add('valid');
            } else {
                element.classList.remove('valid');
                element.classList.add('invalid');
            }
        }

        function validatePasswordStrength() {
            const value = passwordInput.value;
            checkRequirement(requirements.length, value.length >= 6);
            checkRequirement(requirements.uppercase, /[A-Z]/.test(value));
            checkRequirement(requirements.lowercase, /[a-z]/.test(value));
            checkRequirement(requirements.number, /[0-9]/.test(value));
            checkRequirement(requirements.special, /[\W_]/.test(value));
        }

        function validatePasswordMatch() {
            const isMatch = confirmPasswordInput.value === passwordInput.value && confirmPasswordInput.value.length > 0;
            matchMessage.style.display = isMatch ? "none" : "block";
        }

        function checkFormValidity() {
            const allValid = Object.values(requirements).every(req => req.classList.contains('valid'));
            const isMatch = confirmPasswordInput.value === passwordInput.value && confirmPasswordInput.value.length > 0;
            submitButton.disabled = !(allValid && isMatch);
        }

        passwordInput.addEventListener('input', function () {
            validatePasswordStrength();
            validatePasswordMatch();
            checkFormValidity();
        });

        confirmPasswordInput.addEventListener('input', function () {
            validatePasswordMatch();
            checkFormValidity();
        });
    });
</script>

